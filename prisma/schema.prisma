generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt                 DateTime                    @default(now())
  deleted                   Boolean                     @default(false)
  firebaseId                String?                     @unique(map: "User_firebaseId_key_1")
  updatedAt                 DateTime                    @default(now()) @updatedAt
  wldNullifierHash          String?
  id                        String                      @id(map: "User_pkey_1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  introduction              String                      @default("")
  locationPublic            Boolean                     @default(true)
  nickName                  String?
  pfpNftId                  String?
  notificationsEnabled      Boolean                     @default(true)
  fcmToken                  String?
  loginType                 LoginType
  email                     String?
  chatAccessToken           String?
  profilePartsString        String?
  finalProfileImageUrl      String?
  NftCollectionMemberPoints NftCollectionMemberPoints[]
  Notification              Notification[]
  ScheduleNotification      ScheduleNotification[]
  SpaceBenefitUsageUser     SpaceBenefitUsage[]         @relation("user")
  SpaceCheckIn              SpaceCheckIn[]
  SpaceUser                 SpaceUser[]
  SystemNft                 SystemNft[]
  UserLastKnownSpace        UserLastKnownSpace[]
  UserPointBalance          UserPointBalance?
}

model Announcements {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  title       String
  description String
}

model NftCollection {
  id                        String                      @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
  deleted                   Boolean                     @default(false)
  name                      String
  symbol                    String
  link                      String?
  tokenAddress              String                      @id
  contractType              String
  collectionLogo            String?
  chain                     SupportedChains
  chatChannelCreated        Boolean                     @default(false)
  category                  SpaceCategory?
  Nft                       Nft[]
  NftCollectionAllowedSpace NftCollectionAllowedSpace[]
  NftCollectionMemberPoints NftCollectionMemberPoints[]
  NftCollectionPoints       NftCollectionPoints?
  SpaceBenefitNftCollection SpaceBenefitNftCollection[]
  SpaceBenefitUsage         SpaceBenefitUsage[]
}

model SystemNftCollection {
  tokenAddress             String                     @id @default(cuid())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  name                     String                     @unique
  symbol                   String                     @unique
  alias                    String                     @unique
  contractType             String                     @default("KIP-17")
  description              String?
  lastMintedTokenId        Int                        @default(0)
  maxMintedTokens          Int                        @default(200)
  addressUpdated           Boolean                    @default(false)
  spaceId                  String?                    @db.Uuid
  imageId                  String                     @db.Uuid
  contractSubmitted        Boolean                    @default(false)
  termsUrl                 String?
  redeemTermsUrl           String?
  category                 SpaceCategory?
  maxDistanceFromSpace     Int?
  SystemNft                SystemNft[]
  image                    directus_files             @relation(fields: [imageId], references: [id])
  space                    Space?                     @relation(fields: [spaceId], references: [id], onUpdate: NoAction)
  SystemNftCollectionSpace SystemNftCollectionSpace[]
}

model SystemNft {
  id               String              @id
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  tokenAddress     String
  tokenId          Int
  tokenUri         String
  imageUrl         String
  recipientAddress String
  tokenFileId      Int
  name             String
  userId           String              @db.Uuid
  nftCollection    SystemNftCollection @relation(fields: [tokenAddress], references: [tokenAddress], onDelete: Cascade)
  tokenFile        MediaFile           @relation(fields: [tokenFileId], references: [id])
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NftCollectionPoints {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  totalPoints      Int
  communityRank    Int
  totalMembers     Int
  pointFluctuation Int           @default(0)
  tokenAddress     String        @unique
  nftCollection    NftCollection @relation(fields: [tokenAddress], references: [tokenAddress], onDelete: Cascade)
}

model NftCollectionMemberPoints {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  totalPoints      Int
  memberRank       Int
  pointFluctuation Int           @default(0)
  tokenAddress     String
  userId           String        @db.Uuid
  nftCollection    NftCollection @relation(fields: [tokenAddress], references: [tokenAddress], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Nft {
  id                 String        @id
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt
  deleted            Boolean       @default(false)
  name               String
  imageUrl           String
  tokenAddress       String
  tokenId            String
  tokenUpdatedAt     DateTime?
  ownedWalletAddress String
  order              Int           @default(0)
  lastOwnershipCheck DateTime      @default(now())
  videoUrl           String?
  ownedWallet        Wallet        @relation(fields: [ownedWalletAddress], references: [publicAddress])
  nftCollection      NftCollection @relation(fields: [tokenAddress], references: [tokenAddress], onDelete: Cascade, onUpdate: NoAction)
}

model Wallet {
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deleted       Boolean        @default(false)
  userId        String         @db.Uuid
  publicAddress String         @id @unique
  provider      WalletProvider
  Nft           Nft[]
}

model MediaFile {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  deleted   Boolean?    @default(false)
  key       String
  bucket    String
  mimeType  String
  SystemNft SystemNft[]
}

model Space {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
  deleted                   Boolean                     @default(false)
  name                      String
  latitude                  Float
  longitude                 Float
  address                   String
  webLink                   String
  businessHoursEnd          String
  businessHoursStart        String
  category                  SpaceCategory
  introduction              String                      @default("")
  locationDescription       String                      @default("")
  imageId                   String                      @db.Uuid
  nameEn                    String?
  introductionEn            String?
  addressEn                 String?
  isTemporarilyClosed       Boolean                     @default(false)
  temporaryClosureReason    String?
  temporaryClosureEndDate   DateTime?
  checkInEnabled            Boolean                     @default(true)
  checkInPointsOverride     Int?
  checkInRequirements       Json?
  dailyCheckInLimit         Int?
  maxCheckInCapacity        Int?
  NftCollectionAllowedSpace NftCollectionAllowedSpace[]
  image                     directus_files              @relation(fields: [imageId], references: [id])
  SpaceBenefit              SpaceBenefit[]
  SpaceBusinessHours        SpaceBusinessHours[]
  SpaceCheckIn              SpaceCheckIn[]
  SpaceCheckInGroup         SpaceCheckInGroup[]
  SpaceUser                 SpaceUser[]
  SpaceUserInvites          SpaceUserInvites[]
  SpaceEventCategory        SpaceEventCategory[]
  SystemNftCollection       SystemNftCollection[]
  SystemNftCollectionSpace  SystemNftCollectionSpace[]
  UserLastKnownSpace        UserLastKnownSpace[]
}

model SpaceUser {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  deleted   Boolean       @default(false)
  spaceId   String        @db.Uuid
  userId    String        @db.Uuid
  role      SpaceUserRole @default(SPACE_ADMIN)
  space     Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
}

model SpaceUserInvites {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deleted   Boolean  @default(false)
  email     String   @unique
  spaceId   String   @db.Uuid
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SpaceBenefit {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
  deleted                   Boolean                     @default(false)
  spaceId                   String                      @db.Uuid
  active                    Boolean                     @default(true)
  description               String
  level                     BenefitLevel                @default(LEVEL1)
  singleUse                 Boolean                     @default(false)
  isRepresentative          Boolean                     @default(false)
  space                     Space                       @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SpaceBenefitNftCollection SpaceBenefitNftCollection[]
  SpaceBenefitUsage         SpaceBenefitUsage[]
}

model UserLastKnownSpace {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deleted   Boolean  @default(false)
  spaceId   String   @db.Uuid
  userId    String   @db.Uuid
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpaceBenefitUsage {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  deleted       Boolean       @default(false)
  benefitId     String        @db.Uuid
  userId        String        @db.Uuid
  pointsEarned  Int           @default(1)
  tokenAddress  String
  benefit       SpaceBenefit  @relation(fields: [benefitId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  nftCollection NftCollection @relation(fields: [tokenAddress], references: [tokenAddress], onDelete: Cascade, onUpdate: NoAction)
  user          User          @relation("user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model BenefitLevelPointCap {
  level     BenefitLevel @id
  pointCap  Int          @unique @default(100)
  updatedAt DateTime     @default(now()) @updatedAt
}

model SystemConfig {
  id                          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @default(now()) @updatedAt
  settingsBannerLink          String?
  settingsBannerHeading       String?
  settingsBannerDescription   String?
  maxDistanceFromSpace        Int             @default(100)
  modalBannerEndDate          DateTime?
  modalBannerImageId          String?         @unique @db.Uuid
  modalBannerStartDate        DateTime?
  settingsBannerDescriptionEn String?
  settingsBannerHeadingEn     String?
  modalBannerImage            directus_files? @relation(fields: [modalBannerImageId], references: [id])
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  title     String
  body      String
  type      String
  params    Json?
  sent      Boolean  @default(false)
  userId    String   @db.Uuid
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScheduleNotification {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  title        String
  body         String
  sent         Boolean  @default(false)
  scheduleTime DateTime @default(now())
  userId       String?  @db.Uuid
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SolanaGroups {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  tokenAddress String
  groupId      String

  @@index([tokenAddress])
}

model directus_activity {
  id                 Int                  @id @default(autoincrement())
  action             String               @db.VarChar(45)
  user               String?              @db.Uuid
  timestamp          DateTime             @default(now()) @db.Timestamptz(6)
  ip                 String?              @db.VarChar(50)
  user_agent         String?
  collection         String               @db.VarChar(64)
  item               String               @db.VarChar(255)
  comment            String?
  origin             String?              @db.VarChar(255)
  directus_revisions directus_revisions[]
}

model directus_collections {
  collection                 String                 @id @db.VarChar(64)
  icon                       String?                @db.VarChar(30)
  note                       String?
  display_template           String?                @db.VarChar(255)
  hidden                     Boolean                @default(false)
  singleton                  Boolean                @default(false)
  translations               Json?                  @db.Json
  archive_field              String?                @db.VarChar(64)
  archive_app_filter         Boolean                @default(true)
  archive_value              String?                @db.VarChar(255)
  unarchive_value            String?                @db.VarChar(255)
  sort_field                 String?                @db.VarChar(64)
  accountability             String?                @default("all") @db.VarChar(255)
  color                      String?                @db.VarChar(255)
  item_duplication_fields    Json?                  @db.Json
  sort                       Int?
  group                      String?                @db.VarChar(64)
  collapse                   String                 @default("open") @db.VarChar(255)
  preview_url                String?                @db.VarChar(255)
  versioning                 Boolean                @default(false)
  directus_collections       directus_collections?  @relation("directus_collectionsTodirectus_collections", fields: [group], references: [collection], onDelete: NoAction, onUpdate: NoAction, map: "directus_collections_group_foreign")
  other_directus_collections directus_collections[] @relation("directus_collectionsTodirectus_collections")
  directus_shares            directus_shares[]
  directus_versions          directus_versions[]
}

model directus_dashboards {
  id              String            @id @db.Uuid
  name            String            @db.VarChar(255)
  icon            String            @default("dashboard") @db.VarChar(30)
  note            String?
  date_created    DateTime?         @default(now()) @db.Timestamptz(6)
  user_created    String?           @db.Uuid
  color           String?           @db.VarChar(255)
  directus_users  directus_users?   @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_dashboards_user_created_foreign")
  directus_panels directus_panels[]
}

model directus_extensions {
  enabled Boolean @default(true)
  id      String  @id @db.Uuid
  folder  String  @db.VarChar(255)
  source  String  @db.VarChar(255)
  bundle  String? @db.Uuid
}

model directus_fields {
  id                 Int      @id @default(autoincrement())
  collection         String   @db.VarChar(64)
  field              String   @db.VarChar(64)
  special            String?  @db.VarChar(64)
  interface          String?  @db.VarChar(64)
  options            Json?    @db.Json
  display            String?  @db.VarChar(64)
  display_options    Json?    @db.Json
  readonly           Boolean  @default(false)
  hidden             Boolean  @default(false)
  sort               Int?
  width              String?  @default("full") @db.VarChar(30)
  translations       Json?    @db.Json
  note               String?
  conditions         Json?    @db.Json
  required           Boolean? @default(false)
  group              String?  @db.VarChar(64)
  validation         Json?    @db.Json
  validation_message String?
}

model directus_files {
  id                                                                    String                @id @db.Uuid
  storage                                                               String                @db.VarChar(255)
  filename_disk                                                         String?               @db.VarChar(255)
  filename_download                                                     String                @db.VarChar(255)
  title                                                                 String?               @db.VarChar(255)
  type                                                                  String?               @db.VarChar(255)
  folder                                                                String?               @db.Uuid
  uploaded_by                                                           String?               @db.Uuid
  uploaded_on                                                           DateTime              @default(now()) @db.Timestamptz(6)
  modified_by                                                           String?               @db.Uuid
  modified_on                                                           DateTime              @default(now()) @db.Timestamptz(6)
  charset                                                               String?               @db.VarChar(50)
  filesize                                                              BigInt?
  width                                                                 Int?
  height                                                                Int?
  duration                                                              Int?
  embed                                                                 String?               @db.VarChar(200)
  description                                                           String?
  location                                                              String?
  tags                                                                  String?
  metadata                                                              Json?                 @db.Json
  focal_point_x                                                         Int?
  focal_point_y                                                         Int?
  Space                                                                 Space[]
  SystemConfig                                                          SystemConfig?
  SystemNftCollection                                                   SystemNftCollection[]
  directus_folders                                                      directus_folders?     @relation(fields: [folder], references: [id], onUpdate: NoAction, map: "directus_files_folder_foreign")
  directus_users_directus_files_modified_byTodirectus_users             directus_users?       @relation("directus_files_modified_byTodirectus_users", fields: [modified_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_modified_by_foreign")
  directus_users_directus_files_uploaded_byTodirectus_users             directus_users?       @relation("directus_files_uploaded_byTodirectus_users", fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_uploaded_by_foreign")
  directus_settings_directus_settings_project_logoTodirectus_files      directus_settings[]   @relation("directus_settings_project_logoTodirectus_files")
  directus_settings_directus_settings_public_backgroundTodirectus_files directus_settings[]   @relation("directus_settings_public_backgroundTodirectus_files")
  directus_settings_directus_settings_public_faviconTodirectus_files    directus_settings[]   @relation("directus_settings_public_faviconTodirectus_files")
  directus_settings_directus_settings_public_foregroundTodirectus_files directus_settings[]   @relation("directus_settings_public_foregroundTodirectus_files")
}

model directus_flows {
  id                  String                @id @db.Uuid
  name                String                @db.VarChar(255)
  icon                String?               @db.VarChar(30)
  color               String?               @db.VarChar(255)
  description         String?
  status              String                @default("active") @db.VarChar(255)
  trigger             String?               @db.VarChar(255)
  accountability      String?               @default("all") @db.VarChar(255)
  options             Json?                 @db.Json
  operation           String?               @unique(map: "directus_flows_operation_unique") @db.Uuid
  date_created        DateTime?             @default(now()) @db.Timestamptz(6)
  user_created        String?               @db.Uuid
  directus_users      directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_flows_user_created_foreign")
  directus_operations directus_operations[]
  directus_webhooks   directus_webhooks[]
}

model directus_folders {
  id                     String              @id @db.Uuid
  name                   String              @db.VarChar(255)
  parent                 String?             @db.Uuid
  directus_files         directus_files[]
  directus_folders       directus_folders?   @relation("directus_foldersTodirectus_folders", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_folders_parent_foreign")
  other_directus_folders directus_folders[]  @relation("directus_foldersTodirectus_folders")
  directus_settings      directus_settings[]
}

model directus_migrations {
  version   String    @id @db.VarChar(255)
  name      String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamptz(6)
}

model directus_notifications {
  id                                                              Int             @id @default(autoincrement())
  timestamp                                                       DateTime?       @default(now()) @db.Timestamptz(6)
  status                                                          String?         @default("inbox") @db.VarChar(255)
  recipient                                                       String          @db.Uuid
  sender                                                          String?         @db.Uuid
  subject                                                         String          @db.VarChar(255)
  message                                                         String?
  collection                                                      String?         @db.VarChar(64)
  item                                                            String?         @db.VarChar(255)
  directus_users_directus_notifications_recipientTodirectus_users directus_users  @relation("directus_notifications_recipientTodirectus_users", fields: [recipient], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_notifications_recipient_foreign")
  directus_users_directus_notifications_senderTodirectus_users    directus_users? @relation("directus_notifications_senderTodirectus_users", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_notifications_sender_foreign")
}

model directus_operations {
  id                                                                         String               @id @db.Uuid
  name                                                                       String?              @db.VarChar(255)
  key                                                                        String               @db.VarChar(255)
  type                                                                       String               @db.VarChar(255)
  position_x                                                                 Int
  position_y                                                                 Int
  options                                                                    Json?                @db.Json
  resolve                                                                    String?              @unique(map: "directus_operations_resolve_unique") @db.Uuid
  reject                                                                     String?              @unique(map: "directus_operations_reject_unique") @db.Uuid
  flow                                                                       String               @db.Uuid
  date_created                                                               DateTime?            @default(now()) @db.Timestamptz(6)
  user_created                                                               String?              @db.Uuid
  directus_flows                                                             directus_flows       @relation(fields: [flow], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_operations_flow_foreign")
  directus_operations_directus_operations_rejectTodirectus_operations        directus_operations? @relation("directus_operations_rejectTodirectus_operations", fields: [reject], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_reject_foreign")
  other_directus_operations_directus_operations_rejectTodirectus_operations  directus_operations? @relation("directus_operations_rejectTodirectus_operations")
  directus_operations_directus_operations_resolveTodirectus_operations       directus_operations? @relation("directus_operations_resolveTodirectus_operations", fields: [resolve], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_resolve_foreign")
  other_directus_operations_directus_operations_resolveTodirectus_operations directus_operations? @relation("directus_operations_resolveTodirectus_operations")
  directus_users                                                             directus_users?      @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_operations_user_created_foreign")
}

model directus_panels {
  id                  String              @id @db.Uuid
  dashboard           String              @db.Uuid
  name                String?             @db.VarChar(255)
  icon                String?             @db.VarChar(30)
  color               String?             @db.VarChar(10)
  show_header         Boolean             @default(false)
  note                String?
  type                String              @db.VarChar(255)
  position_x          Int
  position_y          Int
  width               Int
  height              Int
  options             Json?               @db.Json
  date_created        DateTime?           @default(now()) @db.Timestamptz(6)
  user_created        String?             @db.Uuid
  directus_dashboards directus_dashboards @relation(fields: [dashboard], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_panels_dashboard_foreign")
  directus_users      directus_users?     @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_panels_user_created_foreign")
}

model directus_permissions {
  id             Int             @id @default(autoincrement())
  role           String?         @db.Uuid
  collection     String          @db.VarChar(64)
  action         String          @db.VarChar(10)
  permissions    Json?           @db.Json
  validation     Json?           @db.Json
  presets        Json?           @db.Json
  fields         String?
  directus_roles directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_permissions_role_foreign")
}

model directus_presets {
  id               Int             @id @default(autoincrement())
  bookmark         String?         @db.VarChar(255)
  user             String?         @db.Uuid
  role             String?         @db.Uuid
  collection       String?         @db.VarChar(64)
  search           String?         @db.VarChar(100)
  layout           String?         @default("tabular") @db.VarChar(100)
  layout_query     Json?           @db.Json
  layout_options   Json?           @db.Json
  refresh_interval Int?
  filter           Json?           @db.Json
  icon             String?         @default("bookmark") @db.VarChar(30)
  color            String?         @db.VarChar(255)
  directus_roles   directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_role_foreign")
  directus_users   directus_users? @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_user_foreign")
}

model directus_relations {
  id                      Int     @id @default(autoincrement())
  many_collection         String  @db.VarChar(64)
  many_field              String  @db.VarChar(64)
  one_collection          String? @db.VarChar(64)
  one_field               String? @db.VarChar(64)
  one_collection_field    String? @db.VarChar(64)
  one_allowed_collections String?
  junction_field          String? @db.VarChar(64)
  sort_field              String? @db.VarChar(64)
  one_deselect_action     String  @default("nullify") @db.VarChar(255)
}

model directus_revisions {
  id                       Int                  @id @default(autoincrement())
  activity                 Int
  collection               String               @db.VarChar(64)
  item                     String               @db.VarChar(255)
  data                     Json?                @db.Json
  delta                    Json?                @db.Json
  parent                   Int?
  version                  String?              @db.Uuid
  directus_activity        directus_activity    @relation(fields: [activity], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_activity_foreign")
  directus_revisions       directus_revisions?  @relation("directus_revisionsTodirectus_revisions", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_revisions_parent_foreign")
  other_directus_revisions directus_revisions[] @relation("directus_revisionsTodirectus_revisions")
  directus_versions        directus_versions?   @relation(fields: [version], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_version_foreign")
}

model directus_roles {
  id                   String                 @id @db.Uuid
  name                 String                 @db.VarChar(100)
  icon                 String                 @default("supervised_user_circle") @db.VarChar(30)
  description          String?
  ip_access            String?
  enforce_tfa          Boolean                @default(false)
  admin_access         Boolean                @default(false)
  app_access           Boolean                @default(true)
  directus_permissions directus_permissions[]
  directus_presets     directus_presets[]
  directus_shares      directus_shares[]
  directus_users       directus_users[]
}

model directus_sessions {
  token           String           @id @db.VarChar(64)
  user            String?          @db.Uuid
  expires         DateTime         @db.Timestamptz(6)
  ip              String?          @db.VarChar(255)
  user_agent      String?
  share           String?          @db.Uuid
  origin          String?          @db.VarChar(255)
  next_token      String?
  directus_shares directus_shares? @relation(fields: [share], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_share_foreign")
  directus_users  directus_users?  @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_user_foreign")
}

model directus_settings {
  id                                                                 Int               @id @default(autoincrement())
  project_name                                                       String            @default("Directus") @db.VarChar(100)
  project_url                                                        String?           @db.VarChar(255)
  project_color                                                      String            @default("#6644FF") @db.VarChar(255)
  project_logo                                                       String?           @db.Uuid
  public_foreground                                                  String?           @db.Uuid
  public_background                                                  String?           @db.Uuid
  public_note                                                        String?
  auth_login_attempts                                                Int?              @default(25)
  auth_password_policy                                               String?           @db.VarChar(100)
  storage_asset_transform                                            String?           @default("all") @db.VarChar(7)
  storage_asset_presets                                              Json?             @db.Json
  custom_css                                                         String?
  storage_default_folder                                             String?           @db.Uuid
  basemaps                                                           Json?             @db.Json
  mapbox_key                                                         String?           @db.VarChar(255)
  module_bar                                                         Json?             @db.Json
  project_descriptor                                                 String?           @db.VarChar(100)
  default_language                                                   String            @default("en-US") @db.VarChar(255)
  custom_aspect_ratios                                               Json?             @db.Json
  public_favicon                                                     String?           @db.Uuid
  default_appearance                                                 String            @default("auto") @db.VarChar(255)
  default_theme_light                                                String?           @db.VarChar(255)
  theme_light_overrides                                              Json?             @db.Json
  default_theme_dark                                                 String?           @db.VarChar(255)
  theme_dark_overrides                                               Json?             @db.Json
  report_error_url                                                   String?           @db.VarChar(255)
  report_bug_url                                                     String?           @db.VarChar(255)
  report_feature_url                                                 String?           @db.VarChar(255)
  directus_files_directus_settings_project_logoTodirectus_files      directus_files?   @relation("directus_settings_project_logoTodirectus_files", fields: [project_logo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_project_logo_foreign")
  directus_files_directus_settings_public_backgroundTodirectus_files directus_files?   @relation("directus_settings_public_backgroundTodirectus_files", fields: [public_background], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_background_foreign")
  directus_files_directus_settings_public_faviconTodirectus_files    directus_files?   @relation("directus_settings_public_faviconTodirectus_files", fields: [public_favicon], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_favicon_foreign")
  directus_files_directus_settings_public_foregroundTodirectus_files directus_files?   @relation("directus_settings_public_foregroundTodirectus_files", fields: [public_foreground], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_foreground_foreign")
  directus_folders                                                   directus_folders? @relation(fields: [storage_default_folder], references: [id], onUpdate: NoAction, map: "directus_settings_storage_default_folder_foreign")
}

model directus_shares {
  id                   String               @id @db.Uuid
  name                 String?              @db.VarChar(255)
  collection           String               @db.VarChar(64)
  item                 String               @db.VarChar(255)
  role                 String?              @db.Uuid
  password             String?              @db.VarChar(255)
  user_created         String?              @db.Uuid
  date_created         DateTime?            @default(now()) @db.Timestamptz(6)
  date_start           DateTime?            @db.Timestamptz(6)
  date_end             DateTime?            @db.Timestamptz(6)
  times_used           Int?                 @default(0)
  max_uses             Int?
  directus_sessions    directus_sessions[]
  directus_collections directus_collections @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_collection_foreign")
  directus_roles       directus_roles?      @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_role_foreign")
  directus_users       directus_users?      @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_shares_user_created_foreign")
}

model directus_translations {
  id       String @id @db.Uuid
  language String @db.VarChar(255)
  key      String @db.VarChar(255)
  value    String
}

model directus_users {
  id                                                                      String                   @id @db.Uuid
  first_name                                                              String?                  @db.VarChar(50)
  last_name                                                               String?                  @db.VarChar(50)
  email                                                                   String?                  @unique(map: "directus_users_email_unique") @db.VarChar(128)
  password                                                                String?                  @db.VarChar(255)
  location                                                                String?                  @db.VarChar(255)
  title                                                                   String?                  @db.VarChar(50)
  description                                                             String?
  tags                                                                    Json?                    @db.Json
  avatar                                                                  String?                  @db.Uuid
  language                                                                String?                  @db.VarChar(255)
  tfa_secret                                                              String?                  @db.VarChar(255)
  status                                                                  String                   @default("active") @db.VarChar(16)
  role                                                                    String?                  @db.Uuid
  token                                                                   String?                  @unique(map: "directus_users_token_unique") @db.VarChar(255)
  last_access                                                             DateTime?                @db.Timestamptz(6)
  last_page                                                               String?                  @db.VarChar(255)
  provider                                                                String                   @default("default") @db.VarChar(128)
  external_identifier                                                     String?                  @unique(map: "directus_users_external_identifier_unique") @db.VarChar(255)
  auth_data                                                               Json?                    @db.Json
  email_notifications                                                     Boolean?                 @default(true)
  appearance                                                              String?                  @db.VarChar(255)
  theme_dark                                                              String?                  @db.VarChar(255)
  theme_light                                                             String?                  @db.VarChar(255)
  theme_light_overrides                                                   Json?                    @db.Json
  theme_dark_overrides                                                    Json?                    @db.Json
  directus_dashboards                                                     directus_dashboards[]
  directus_files_directus_files_modified_byTodirectus_users               directus_files[]         @relation("directus_files_modified_byTodirectus_users")
  directus_files_directus_files_uploaded_byTodirectus_users               directus_files[]         @relation("directus_files_uploaded_byTodirectus_users")
  directus_flows                                                          directus_flows[]
  directus_notifications_directus_notifications_recipientTodirectus_users directus_notifications[] @relation("directus_notifications_recipientTodirectus_users")
  directus_notifications_directus_notifications_senderTodirectus_users    directus_notifications[] @relation("directus_notifications_senderTodirectus_users")
  directus_operations                                                     directus_operations[]
  directus_panels                                                         directus_panels[]
  directus_presets                                                        directus_presets[]
  directus_sessions                                                       directus_sessions[]
  directus_shares                                                         directus_shares[]
  directus_roles                                                          directus_roles?          @relation(fields: [role], references: [id], onUpdate: NoAction, map: "directus_users_role_foreign")
  directus_versions_directus_versions_user_createdTodirectus_users        directus_versions[]      @relation("directus_versions_user_createdTodirectus_users")
  directus_versions_directus_versions_user_updatedTodirectus_users        directus_versions[]      @relation("directus_versions_user_updatedTodirectus_users")
}

model directus_versions {
  id                                                            String               @id @db.Uuid
  key                                                           String               @db.VarChar(64)
  name                                                          String?              @db.VarChar(255)
  collection                                                    String               @db.VarChar(64)
  item                                                          String               @db.VarChar(255)
  hash                                                          String?              @db.VarChar(255)
  date_created                                                  DateTime?            @default(now()) @db.Timestamptz(6)
  date_updated                                                  DateTime?            @default(now()) @db.Timestamptz(6)
  user_created                                                  String?              @db.Uuid
  user_updated                                                  String?              @db.Uuid
  directus_revisions                                            directus_revisions[]
  directus_collections                                          directus_collections @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_versions_collection_foreign")
  directus_users_directus_versions_user_createdTodirectus_users directus_users?      @relation("directus_versions_user_createdTodirectus_users", fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_versions_user_created_foreign")
  directus_users_directus_versions_user_updatedTodirectus_users directus_users?      @relation("directus_versions_user_updatedTodirectus_users", fields: [user_updated], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_versions_user_updated_foreign")
}

model directus_webhooks {
  id                            Int             @id @default(autoincrement())
  name                          String          @db.VarChar(255)
  method                        String          @default("POST") @db.VarChar(10)
  url                           String          @db.VarChar(255)
  status                        String          @default("active") @db.VarChar(10)
  data                          Boolean         @default(true)
  actions                       String          @db.VarChar(100)
  collections                   String          @db.VarChar(255)
  headers                       Json?           @db.Json
  was_active_before_deprecation Boolean         @default(false)
  migrated_flow                 String?         @db.Uuid
  directus_flows                directus_flows? @relation(fields: [migrated_flow], references: [id], onUpdate: NoAction, map: "directus_webhooks_migrated_flow_foreign")
}

model SystemNftCollectionSpace {
  id                              Int                  @id @default(autoincrement())
  SystemNftCollectionTokenAddress String?
  SpaceId                         String?              @db.Uuid
  Space                           Space?               @relation(fields: [SpaceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "systemnftcollectionspace_spaceid_foreign")
  SystemNftCollection             SystemNftCollection? @relation(fields: [SystemNftCollectionTokenAddress], references: [tokenAddress], onDelete: Cascade, onUpdate: NoAction, map: "systemnftcollectionspace_systemnftcollectio__7fdec97_foreign")
}

model NftCollectionAllowedSpace {
  id                        Int            @id @default(autoincrement())
  NftCollectionTokenAddress String?
  SpaceId                   String?        @db.Uuid
  NftCollection             NftCollection? @relation(fields: [NftCollectionTokenAddress], references: [tokenAddress], onDelete: Cascade, onUpdate: NoAction, map: "nftcollectionallowedspace_nftcollectiontokenaddress_foreign")
  Space                     Space?         @relation(fields: [SpaceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "nftcollectionallowedspace_spaceid_foreign")
}

model SpaceBenefitNftCollection {
  id                        Int            @id @default(autoincrement())
  SpaceBenefitId            String?        @db.Uuid
  NftCollectionTokenAddress String?
  NftCollection             NftCollection? @relation(fields: [NftCollectionTokenAddress], references: [tokenAddress], onDelete: Cascade, onUpdate: NoAction, map: "spacebenefitnftcollection_nftcollectiontokenaddress_foreign")
  SpaceBenefit              SpaceBenefit?  @relation(fields: [SpaceBenefitId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "spacebenefitnftcollection_spacebenefitid_foreign")
}

model SpaceBusinessHours {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  isClosed       Boolean  @default(false)
  dayOfWeek      String?  @db.VarChar(255)
  openTime       String?  @db.VarChar(255)
  closeTime      String?  @db.VarChar(255)
  spaceId        String?  @db.Uuid
  breakStartTime String?  @db.VarChar(255)
  breakEndTime   String?  @db.VarChar(255)
  space          Space?   @relation(fields: [spaceId], references: [id], onUpdate: NoAction, map: "spacebusinesshours_spaceid_foreign")
}

model EventCategory {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  deleted            Boolean              @default(false)
  name               String               @unique
  nameEn             String?
  description        String?
  descriptionEn      String?
  displayOrder       Int                  @default(0)
  isActive           Boolean              @default(true)
  colorCode          String?
  iconUrl            String?
  SpaceEventCategory SpaceEventCategory[]
}

model SpaceEventCategory {
  id              Int           @id @default(autoincrement())
  spaceId         String        @map("Space_id") @db.Uuid
  eventCategoryId String        @map("EventCategory_id") @db.Uuid
  eventCategory   EventCategory @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)
  space           Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([spaceId, eventCategoryId])
  @@map("Space_EventCategory")
}

model SpaceCheckIn {
  id           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt
  userId       String             @db.Uuid
  spaceId      String             @db.Uuid
  checkedInAt  DateTime           @default(now())
  isActive     Boolean            @default(true)
  groupId      String?            @db.Uuid
  latitude     Float
  longitude    Float
  pointsEarned Int                @default(0)
  group        SpaceCheckInGroup? @relation(fields: [groupId], references: [id])
  space        Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId, isActive])
  @@index([spaceId, isActive])
  @@index([userId, isActive])
}

model SpaceCheckInGroup {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  spaceId         String         @db.Uuid
  isCompleted     Boolean        @default(false)
  completedAt     DateTime?
  bonusAwarded    Boolean        @default(false)
  bonusPoints     Int            @default(10)
  requiredMembers Int            @default(5)
  checkIns        SpaceCheckIn[]
  space           Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId, isCompleted])
}

model UserPointBalance {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  userId           String   @unique @db.Uuid
  totalBalance     Int      @default(0)
  availableBalance Int      @default(0)
  lockedBalance    Int      @default(0)
  lifetimeEarned   Int      @default(0)
  lifetimeSpent    Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User2 {
  createdAt            DateTime  @default(now())
  deleted              Boolean   @default(false)
  firebaseId           String?   @unique(map: "User_firebaseId_key")
  updatedAt            DateTime  @default(now())
  wldNullifierHash     String?
  id                   String    @id(map: "User_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  introduction         String    @default("")
  locationPublic       Boolean   @default(true)
  nickName             String?
  pfpNftId             String?
  notificationsEnabled Boolean   @default(true)
  fcmToken             String?
  profilePartsString   String?
  finalProfileImageUrl String?
  loginType            LoginType
  email                String?
  chatAccessToken      String?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model directus_collections_backup_20250108 {
  collection              String?  @db.VarChar(64)
  icon                    String?  @db.VarChar(30)
  note                    String?
  display_template        String?  @db.VarChar(255)
  hidden                  Boolean?
  singleton               Boolean?
  translations            Json?    @db.Json
  archive_field           String?  @db.VarChar(64)
  archive_app_filter      Boolean?
  archive_value           String?  @db.VarChar(255)
  unarchive_value         String?  @db.VarChar(255)
  sort_field              String?  @db.VarChar(64)
  accountability          String?  @db.VarChar(255)
  color                   String?  @db.VarChar(255)
  item_duplication_fields Json?    @db.Json
  sort                    Int?
  group                   String?  @db.VarChar(64)
  collapse                String?  @db.VarChar(255)
  preview_url             String?  @db.VarChar(255)
  versioning              Boolean?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model directus_fields_backup_20250108 {
  id                 Int?
  collection         String?  @db.VarChar(64)
  field              String?  @db.VarChar(64)
  special            String?  @db.VarChar(64)
  interface          String?  @db.VarChar(64)
  options            Json?    @db.Json
  display            String?  @db.VarChar(64)
  display_options    Json?    @db.Json
  readonly           Boolean?
  hidden             Boolean?
  sort               Int?
  width              String?  @db.VarChar(30)
  translations       Json?    @db.Json
  note               String?
  conditions         Json?    @db.Json
  required           Boolean?
  group              String?  @db.VarChar(64)
  validation         Json?    @db.Json
  validation_message String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model directus_permissions_backup_20250108 {
  id          Int?
  role        String? @db.Uuid
  collection  String? @db.VarChar(64)
  action      String? @db.VarChar(10)
  permissions Json?   @db.Json
  validation  Json?   @db.Json
  presets     Json?   @db.Json
  fields      String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model directus_relations_backup_20250108 {
  id                      Int?
  many_collection         String? @db.VarChar(64)
  many_field              String? @db.VarChar(64)
  one_collection          String? @db.VarChar(64)
  one_field               String? @db.VarChar(64)
  one_collection_field    String? @db.VarChar(64)
  one_allowed_collections String?
  junction_field          String? @db.VarChar(64)
  sort_field              String? @db.VarChar(64)
  one_deselect_action     String? @db.VarChar(255)

  @@ignore
}

enum LoginType {
  FIREBASE
  WORLD_ID
}

enum SpaceUserRole {
  SPACE_ADMIN
}

enum SupportedChains {
  ETHEREUM
  POLYGON
  MUMBAI
  SOLANA
  KLAYTN
  AVALANCHE
}

enum WalletProvider {
  METAMASK
  KLIP
  PHANTOM
  WALLET_CONNECT
  WEPIN_EVM
  WEPIN_SOLANA
}

enum SpaceCategory {
  PUB
  CAFE
  COWORKING
  MUSIC
  MEAL
  WALKERHILL
  ETC
}

enum BenefitLevel {
  LEVEL1
  LEVEL2
  LEVEL3
  LEVEL4
  LEVEL5
  LEVEL_NFT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PointTransactionType {
  EARNED
  SPENT
  REFUND
  ADJUSTMENT
  LOCKED
  UNLOCKED
}

enum PointSource {
  CHECK_IN
  GROUP_BONUS
  PURCHASE
  REWARD
  REFERRAL
  EVENT
  ADMIN_GRANT
  ADMIN_DEDUCT
  TRANSFER_IN
  TRANSFER_OUT
  REFUND
  OTHER
}
