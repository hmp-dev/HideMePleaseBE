generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  deleted          Boolean           @default(false)
  nickName         String            @default("")
  introduction     String            @default("")
  locationPublic   Boolean           @default(true)
  wldNullifierHash String?           @unique
  firebaseId       String?           @unique
  pfpNftId         String?
  pfpNft           Nft?              @relation(fields: [pfpNftId], references: [id])
  CmsModule        Wallet[]
  UserSelectedNft  UserSelectedNft[]
  WelcomeNft       WelcomeNft[]
}

enum SupportedChains {
  ETHEREUM
  POLYGON
  MUMBAI
}

model NftCollection {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  deleted         Boolean           @default(false)
  name            String
  symbol          String
  link            String?
  tokenAddress    String            @unique
  contractType    String
  collectionLogo  String?
  chain           SupportedChains
  UserSelectedNft UserSelectedNft[]
  Nft             Nft[]
}

model Nft {
  id              String            @id
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  deleted         Boolean           @default(false)
  name            String
  tokenId         String
  imageUrl        String
  tokenAddress    String
  nftCollection   NftCollection     @relation(fields: [tokenAddress], references: [tokenAddress])
  UserSelectedNft UserSelectedNft[]
  User            User[]
  tokenUpdatedAt  DateTime?

  @@unique([tokenAddress, tokenId])
}

model UserSelectedNft {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  deleted       Boolean       @default(false)
  tokenId       String
  tokenAddress  String
  nft           Nft           @relation(fields: [tokenAddress, tokenId], references: [tokenAddress, tokenId])
  nftCollection NftCollection @relation(fields: [tokenAddress], references: [tokenAddress])
  chain         String
  walletAddress String
  wallet        Wallet        @relation(fields: [walletAddress], references: [publicAddress])
  userId        String        @db.Uuid
  user          User          @relation(fields: [userId], references: [id])
  order         Int
}

enum WalletProvider {
  METAMASK
  KLIP
  PHANTOM
  WALLET_CONNECT
}

model Wallet {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  deleted         Boolean           @default(false)
  userId          String            @db.Uuid
  user            User              @relation(fields: [userId], references: [id])
  publicAddress   String            @unique
  provider        WalletProvider
  UserSelectedNft UserSelectedNft[]
}

model WelcomeNft {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  siteLink  String
  imageId   Int
  image     MediaFile @relation(fields: [imageId], references: [id])
  used      Boolean   @default(false)
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id])

  @@index([used])
}

model MediaFile {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  deleted    Boolean?     @default(false)
  key        String
  bucket     String
  mimeType   String
  Space      Space[]
  WelcomeNft WelcomeNft[]
}

model Space {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deleted   Boolean   @default(false)
  name      String
  latitude  Float
  longitude Float
  address   String
  imageId   Int
  image     MediaFile @relation(fields: [imageId], references: [id])
  webLink   String
}
